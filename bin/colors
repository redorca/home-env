#!/bin/bash

#
# Table of color codes for vt100.  To be imported
# into any shell script wanting to display color
#

#
#
# Simple color names are setting the forground color.
#
# Weird names are setting the forground to the first
# part of the name and the background to the second.
#
# E.G.  REDBLK == Red lettering on a black background
#       regardless of terminal settings.
#
# E.G.  YLWLtBLU == Yellow lettering on a light blue background.
#
# shellcheck disable=2034

BLACK="0"
RED="1"
GREEN="2"
YELLOW="3"
BLUE="4"
PURPLE="5"
LTBLUE="6"
WHITE="7"
DEF=""

declare -A Colors
declare -A Codes

declare -A clrs_seq
declare -a clr_names

## Colors["BLACK"]="\033[1;30m"
## Colors["RED"]="\033[1;31m"
## Colors["GREEN"]="\033[1;32m"
## Colors["YELLOW"]="\033[1;33m"
## Colors["BLUE"]="\033[1;34m"
## Colors["PURPLE"]="\033[1;35m"
## Colors["LTBLUE"]="\033[1;36m"
## Colors["REDBLK"]="\033[1;31;40m"
## Colors["REDYLW"]="\033[1;31;43m"
## Colors["REDBLU"]="\033[1;31;46m"
## Colors["GRNBLK"]="\033[1;32;40m"
## Colors["GRNGRN"]="\033[1;32;42m"
## Colors["YLWBLK"]="\033[1;33;40m"
## Colors["YLWRED"]="\033[1;33;41m"
## Colors["YLWGRN"]="\033[1;33;42m"
## Colors["YLWBLU"]="\033[1;33;44m"
## Colors["YLWLTBLU"]="\033[1;33;46m"

Colors["RESET"]="39;49"
Colors["BLACK"]="30"
Colors["RED"]="31"
Colors["GREEN"]="32"
Colors["YELLOW"]="33"
Colors["BLUE"]="34"
Colors["PURPLE"]="35"
Colors["LTBLUE"]="36"
Colors["WHITE"]="37"

#
# The following colors can be derived from the
# color mapping above.
#
## Colors["LTBLUE"]="36"
## Colors["REDBLK"]="31;40"
## Colors["REDYLW"]="31;43"
## Colors["REDBLU"]="31;46"
## Colors["GRNBLK"]="32;40"
## Colors["GRNGRN"]="32;42"
## Colors["YLWBLK"]="33;40"
## Colors["YLWRED"]="33;41"
## Colors["YLWGRN"]="33;42"
## Colors["YLWBLU"]="33;44"
## Colors["YLWLTBLU"]="33"
## Colors["RESET"]="39;49"

Codes["39;49"]="RESET"
Codes["30"]="BLACK"
Codes["31"]="RED"
Codes["32"]="GREEN"
Codes["33"]="YELLOW"
Codes["34"]="BLUE"
Codes["35"]="PURPLE"
Codes["36"]="LTBLUE"
Codes["37"]="WHITE"
Codes["31;40"]="REDBLK"
Codes["31;43"]="REDYLW"
Codes["31;46"]="REDBLU"
Codes["32;40"]="GRNBLK"
Codes["32;42"]="GRNGRN"
Codes["33;40"]="YLWBLK"
Codes["33;41"]="YLWRED"
Codes["33;42"]="YLWGRN"
Codes["33;44"]="YLWBLU"
Codes["33;46"]="YLWLTBLU"

clr_names=( BLACK RED GREEN YELLOW BLUE LTBLUE PURPLE WHITE DEF )
attr_names=( BRIGHT DIM UNDERSCORE BLINK REVERSE HIDDEN )

print_hash_entries()
{
        local key=
        declare -a Hash=

        Hash=( "$@" )
        for key in ${!Hash[@]} ; do
                echo "key: $key, val: ${Hash[$key]}"
        done

        return
}

#
# Setup the hash of colors which assembles the escape sequence to
# use for each including any background color settings.
#
setup_colors()
{
        local BG=
        local FG=
        local ESC=

        setup_one_color_sequence RED "" 1
}

#
# Add an entry to the colors[] hash.  Args may vary from 1 to 3
# 
# Arg1 : Forground Color
# <opt> Arg2 : Background Color
# <opt> Arg3 : Text Attribute.
#
# Arg3 defaults to 2 and Arg2 defaults to NULL
#
setup_one_color_sequence()
{
        local NAME=
        local NAME_FG=
        local NAME_BG=
        local COLOR_FG=
        local COLOR_BG=
        local TEXT_ATTR=

        #default
        TEXT_ATTR=1

        if [ $# -gt 1 ] ; then
                NAME_FG="$1"
                NAME="${NAME_FG}"_DEF
                COLOR_FG=";3${!NAME_FG}"
        elif [ $# -gt 2 ] ; then
                NAME_BG="$2"
                [ -z "$2" ] && NAME2="DEF"
                NAME="${NAME%_*}_${NAME_BG}"
                COLOR_BG=";4${!2}"
        elif [ $# -eq 3 ] ; then
                TEXT_ATTR="$3"
        elif [ $# -lt 1 ] && [ $# -gt 3 ] ; then
                echo "The number of args provided is unexpected." >&2
                return $EINVAL
        fi
 
        clrs_seq["$NAME"]="${ESC}${TEXT_ATTR}${COLOR_FG}${$COLOR_BG}m"
}

array_copy()
{
        local AName=
        local BName=
        local Tmp=

        AName="$1" ; shift
        BName="$1" ; shift

        echo "================================================="
        declare -p ${AName} | eval sed -e 's/${AName}/${BName}/'
        echo ":: " $Tmp
        eval ${BName}=\([0]="a" [1]="b" [2]="c" [3]="x"\)
#       declare -a Hoo=([0]="a" [1]="b" [2]="c" [3]="x")
#       echo "=== ${BName[@]}"
}

#
# Take a color arg passed in and set the appropriate attribute.
#
function set_attrib()
{
        local Color=
        local ATTR=

        ( [ -z "$1" ] || [ -z "$2" ] ) && return
        Color="${1^^}" ; shift
        ATTR="${1^^}" ; shift
        echo -e "${!Color}" | eval sed -e \'s:\\[.:\\[${!ATTR}:\'
}

#
# Set the attibute names to values
#
RESET=0
ITALIC=3
BOLD=1
UNDERL=4
STRIKE=9
HIDE=8
INVERT=7

#
# Take a color arg passed in and set the appropriate attribute.
#
function invert()
{
        set_attrib "${1^^}" INVERT
}

#
# Take a color arg passed in and set the appropriate attribute.
#
function uline()
{
        set_attrib "${1^^}" UNDERL
}

#
# Take a color arg passed in and set the appropriate attribute.
#
function strike()
{
        set_attrib "${1^^}" STRIKE
}

#
# Take a color arg passed in and set the appropriate attribute.
#
function bold()
{
        set_attrib "${1^^}" BOLD
}

#
# Take a color arg passed in and set the appropriate attribute.
#
function italic()
{
        set_attrib "${1^^}" ITALIC
}

#
# Take a color arg passed in and set the appropriate attribute.
#
function hide()
{
        set_attrib "${1^^}" HIDE
}

#
# Given a color create the escape sequence or the terminal
#
term_codes()
{
        local attrib=
        local code=

        attrib="${BOLD};"
        code=${Colors[$1]}

        [ "${code:0:1}" -eq 0 ] && attrib=$UNDERL
        echo -e "\\033[${attrib}${Colors[$1]}m"
}

xlate_color_to_id()
{
        echo ${Colors["$1"]}
}

xlate_id_to_color()
{
        echo ${Codes["$1"]}
}

help()
{
        [ -n "$1" ] && echo "$1 is not a valid value." >&2
        echo "Please enter a color (red, green, ... ) or a code (31, 32, ... )" >&2
        echo -e "Valid    COLORS CODES:"
        for color in ${!Colors[@]} ; do
                [ "$color" = "RESET" ] && continue
                code=${Colors[$color]}
#               echo -e "color <$(term_codes ${Colors[$color]})>" >&2
                echo -e "\t$(term_codes $color) $color\t $code$(term_codes RESET)::"
        done
}

[ $# -eq 0 ] && help && exit
[ $# -le 3 ] && FG=$1 && shift
[ $# -eq 1 ] && BG=\;$1 && shift
echo "FG ${FG}, BG ${BG}"
RESET="\033[0;39;49m"
# echo -e "\\033[1;34;46mE Pluri${RESET}"
code_fg=${Codes["$FG"]}
k=2
PREFX="\\033[$k1;"
SUFFIX='m'
# echo -e "code_fg @${FG}, \\033[2;${FG};${BG}m Test ${RESET}"
echo -n "  "
for k in 0 1 2 3 4 6 7 9 ; do
        echo -n "   $k  "
done
echo -e -n "\n  "
for k in 0 1 2 3 4 6 7 9 ; do
        PREFX="\\033[${k}"
        echo -e -n "${PREFX};${FG}${BG}m Test ${RESET}"
done
echo ""
exit
[ -n "${Colors["${FG^^}"]}" ] && xlate_color_to_id "${FG^^}"
[ -n "${Codes["$FG"]}" ] && xlate_id_to_color "$FG"
( [ -z "${Colors[${FG^^}]}" ] && [ -z "${Codes[$FG]}" ] ) && help "$FG" && exit 1

