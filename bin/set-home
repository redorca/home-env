#!/bin/bash

DEBUG=${DEBUG:-0}
TRACE=${TRACE:-0}
TMPFILE_EXEC=/tmp/.setup
DRIVE_B="UUID=a1a552cc-2cbf-4467-8b62-410129bdef0e /home/zglue/.mnt  ext4"
FSTAB="/etc/fstab"

trace()
{
        [ "$TRACE" = "1" ] && set -x && return 0
        return 1
}

debug()
{
        [ "$DEBUG" = "1" ] && return 0
        return 1
}

err_echo()
{
        echo -e "$@" >&2
}

dbg_echo()
{
        debug || return

        err_echo "[d] $@"
}

Func()
{
        dbg_echo "[${#FUNCNAME[@]}]  ${FUNCNAME[1]}:: <$@>"
}

#
# Restart from outside of the git tree so we don't
# overwrite ourselves while running and maybe cause
# an early exit or crash.
#
# This works because the file name changes so the if
# check won't trigger the second time.
#
re-exec()
{
        local TMPFILE_EXEC=
	local Args=

	Args="$@"
        TMPFILE_EXEC=$(mktemp -p /tmp .$(basename $0).XXXX)

        #
        # Relocate so when we do a git checkout we don't overwrite ourselves.
        #
        if [ "$(basename "$0")" = "set-home" ] ; then
                cat "$0" >  $TMPFILE_EXEC
                cd /tmp ||  exit  1
                chmod +x  $TMPFILE_EXEC
                exec  $TMPFILE_EXEC $Args
        fi
}

mk_vimrc_color()
{
        Func
        local File=
        local VimShareDir=
        local PREAMBLE=

        File=~/.vimrc_color
        VimShareDir=/usr/share/vim

        cat >$File <<"EOF"
"
"
" Uncomment aney ONE of the following color scheme directives
" to have vim colorize the text. Of course comment out any color
" directive in use.
"
"
EOF
        PREAMBLE="\" color "
        find $VimShareDir -type f -name "*.vim" \
                | grep /colors/ \
                | eval sed -e \''s:^.*\/::'\' -e \'s:^:"$PREAMBLE":\' \
                        -e 's:\.vim$::' >> $File
        sed -i -e '/desert$/s/^\" //' $File

        debug && cat $File
}

#
# Well, duh.
#
is_git_tree()
{
	local Here=

	[ $# -gt 0 ] && Here="$1"
	(
		dbg_echo "Here : <$Here>"
		[ -d "$Here" ] || return 2
		cd "$Here"
		if ! git rev-parse --git-dir >/dev/null 2>&1 ; then
			err_echo "Not within a git tree."
			return 1
		fi
	) || return 1
	dbg_echo "Success"
	return 0
}

git_config_key_init()
{
        Func
        local Key=
        local Val=

        Key="$1" ; shift
        Val="$1" ; shift

        if [ -z "$(git config $Key)" ] ; then
                dbg_echo "Set config $Key to $Val"
                git config "$Key" "$Val"
        fi
}

git_config_for_use()
{
        Func $@
        local Name=
        local Email=

        Name="$1" ; shift
        Email="$1" ; shift

        git_config_key_init user.name "$Name"
        git_config_key_init user.email "$Email"
        git_config_key_init color.status auto
        git_config_key_init color.status.staged green
        git_config_key_init color.status.unstaged red
#       git config_key_init color.status.untracked yellow
}

#
# Checkout the repo into the passed in location.
#
git_populate()
{
	local GitDir=

	Func $@
	GitDir="$1" && shift
	[ -z "$GitDir" ] && GitDir="."
	dbg_echo "GitDir $GitDir :: ${GitDir%.git}"

	cd ${GitDir%.git} && git checkout . > /dev/null
}

#
# Maybe these files were cloned via https. Make sure
# the orgin remote is based on ssh instead.
#
git_fixup_origin()
{
	sed -i -e 's,https://,ssh://git@,' .git/config
}

#
# Create the sudoers file allowing seamless use;
# no password requested.
#
enable_sudo()
{
        local UFile=

        UFile=/etc/sudoers.d/$USER
        [ -f $UFile ] && return 0

        echo "$USER     ALL=(ALL:ALL) NOPASSWD: ALL" > $UFile
        chmod go-w $UFile
}

mount_sdb()
{
        local DriveUUID=

        DriveUUID="$1"
        mkdir ~/.mnt
        sudo -H mount /dev/sdb1  ~/.mnt
        (
                cd ~ || die "No home dir found?"

                for entry in $(ls ~/.mnt) ; do
                        [ ! -d "$entry" ] && continue
                        [ "$entry" = "Documents" ] && continue
                        ln -sf ".mnt/$entry"
                done
        )

        #
        # Update $FSTAB to make the mount permanent.
        #
        CMD=( "sed" "-i" "-e" '$a'"$DriveUUID'"  "$FSTAB" )
        sudo "${CMD[@]}"

        cd $HOME
        if [ -f .mn/keys.rsa.tgz ] ; then
	        tar -zxpf .mnt/keys.rsa.tgz
	        mkdir tmp
	        cd tmp
	        tar -zxf ../.mnt/dot.config.tgz
	        cp -a .config ../
        fi

}

#
# Make sure .bashrc includes .bash_aliases
#
enable_bash_aliases()
{
	local BASHRC=~/.bashrc
        local BASH_ALIASES=~/.local/.bash_aliases
	if ! grep "${BASH_ALIASES}" "$BASHRC" >/dev/null ; then
	        dbg_echo "Setting up bash aliases."
	        # shellcheck disable=2129
                cat >> "$BASHRC" <<EOF
if [ -f "${BASH_ALIASES}" ] ; then
	source "${BASH_ALIASES}"
fi
EOF
	fi
}

#
# Setup constants
#
instantiate()
{
	local _DIR=
	local Tmp=

	Tmp="${0%/*$USER/}"
	_DIR=$HOME/${Tmp%/*}
	dbg_echo "DIR ${_DIR}   Tmp ${Tmp}"

	if [ ! -d "$_DIR" ] ; then
		err_echo "No home-env/.git found"
		return 2
	fi

	echo "${_DIR}"
	return 0
}

trace

#
# List of args to pass to the exec call
#
EXEC_ARGS=( "BINDIR=$BINDIR" "DEBUG=$DEBUG" "TRACE=$TRACE" )
FOO=$(echo "${EXEC_ARGS[@]}" | sed -e 's:=[^ ]* :\|:g' -e 's:=[^ ]*$::')
while [ $# -gt 0 ] ; do
	case "${1%=*}" in
	${FOO})
		eval "export $1"
		;;
	*)
		;;
	esac
	shift
done

[ -z "$BINDIR" ] && BINDIR=$(instantiate)
dbg_echo "BINDIR :: ${BINDIR}"
re-exec ${EXEC_ARGS[@]}

# shellcheck disable=2164 pushd ~ >/dev/null

cd "${BINDIR%/bin}"
dbg_echo "In dir $(pwd)"

ln -sf home-env/.git
if is_git_tree ; then
        err_echo "Home environment already setup."
        exit 0
fi

PATH="$BINDIR:$PATH"
git_config_for_use "Bill" "zgluebill@icloud.com"

git_populate "${BINDIR%/bin}"
git_fixup_origin
cd $HOME
mk_vimrc_color

enable_bash_aliases
if [ -e /sys/block/sdb ] && [ -b /dev/sdb1 ] ; then
        mount_sdb $DRIVE_B
fi
